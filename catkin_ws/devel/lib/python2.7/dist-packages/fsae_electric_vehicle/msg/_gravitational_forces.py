# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from fsae_electric_vehicle/gravitational_forces.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class gravitational_forces(genpy.Message):
  _md5sum = "96e2fc03b6486059b9ae94e0a184b112"
  _type = "fsae_electric_vehicle/gravitational_forces"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """float32 gyro_x 
float32 gyro_y 
float32 gyro_z 
string gyro_time
float32 accel_x 
float32 accel_y 
float32 accel_z 
string accel_time
float32 compass_x 
float32 compass_y 
float32 compass_z 
string compass_time
"""
  __slots__ = ['gyro_x','gyro_y','gyro_z','gyro_time','accel_x','accel_y','accel_z','accel_time','compass_x','compass_y','compass_z','compass_time']
  _slot_types = ['float32','float32','float32','string','float32','float32','float32','string','float32','float32','float32','string']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       gyro_x,gyro_y,gyro_z,gyro_time,accel_x,accel_y,accel_z,accel_time,compass_x,compass_y,compass_z,compass_time

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(gravitational_forces, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.gyro_x is None:
        self.gyro_x = 0.
      if self.gyro_y is None:
        self.gyro_y = 0.
      if self.gyro_z is None:
        self.gyro_z = 0.
      if self.gyro_time is None:
        self.gyro_time = ''
      if self.accel_x is None:
        self.accel_x = 0.
      if self.accel_y is None:
        self.accel_y = 0.
      if self.accel_z is None:
        self.accel_z = 0.
      if self.accel_time is None:
        self.accel_time = ''
      if self.compass_x is None:
        self.compass_x = 0.
      if self.compass_y is None:
        self.compass_y = 0.
      if self.compass_z is None:
        self.compass_z = 0.
      if self.compass_time is None:
        self.compass_time = ''
    else:
      self.gyro_x = 0.
      self.gyro_y = 0.
      self.gyro_z = 0.
      self.gyro_time = ''
      self.accel_x = 0.
      self.accel_y = 0.
      self.accel_z = 0.
      self.accel_time = ''
      self.compass_x = 0.
      self.compass_y = 0.
      self.compass_z = 0.
      self.compass_time = ''

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_3f().pack(_x.gyro_x, _x.gyro_y, _x.gyro_z))
      _x = self.gyro_time
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_3f().pack(_x.accel_x, _x.accel_y, _x.accel_z))
      _x = self.accel_time
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_3f().pack(_x.compass_x, _x.compass_y, _x.compass_z))
      _x = self.compass_time
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      _x = self
      start = end
      end += 12
      (_x.gyro_x, _x.gyro_y, _x.gyro_z,) = _get_struct_3f().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.gyro_time = str[start:end].decode('utf-8')
      else:
        self.gyro_time = str[start:end]
      _x = self
      start = end
      end += 12
      (_x.accel_x, _x.accel_y, _x.accel_z,) = _get_struct_3f().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.accel_time = str[start:end].decode('utf-8')
      else:
        self.accel_time = str[start:end]
      _x = self
      start = end
      end += 12
      (_x.compass_x, _x.compass_y, _x.compass_z,) = _get_struct_3f().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.compass_time = str[start:end].decode('utf-8')
      else:
        self.compass_time = str[start:end]
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_3f().pack(_x.gyro_x, _x.gyro_y, _x.gyro_z))
      _x = self.gyro_time
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_3f().pack(_x.accel_x, _x.accel_y, _x.accel_z))
      _x = self.accel_time
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_3f().pack(_x.compass_x, _x.compass_y, _x.compass_z))
      _x = self.compass_time
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      _x = self
      start = end
      end += 12
      (_x.gyro_x, _x.gyro_y, _x.gyro_z,) = _get_struct_3f().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.gyro_time = str[start:end].decode('utf-8')
      else:
        self.gyro_time = str[start:end]
      _x = self
      start = end
      end += 12
      (_x.accel_x, _x.accel_y, _x.accel_z,) = _get_struct_3f().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.accel_time = str[start:end].decode('utf-8')
      else:
        self.accel_time = str[start:end]
      _x = self
      start = end
      end += 12
      (_x.compass_x, _x.compass_y, _x.compass_z,) = _get_struct_3f().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.compass_time = str[start:end].decode('utf-8')
      else:
        self.compass_time = str[start:end]
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_3f = None
def _get_struct_3f():
    global _struct_3f
    if _struct_3f is None:
        _struct_3f = struct.Struct("<3f")
    return _struct_3f
